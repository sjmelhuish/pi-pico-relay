import asyncio
import time

import framebuf
import micropython
from machine import I2C, Pin, Timer

import my_secrets
from mqtt_as import MQTTClient, config
from ssd1306 import SSD1306_I2C

# from enum import Enum

# Required on Pyboard D and ESP32. On ESP8266 these may be omitted (see above).
config["ssid"] = my_secrets.SSID
config["wifi_pw"] = my_secrets.PASSWORD
config["server"] = my_secrets.MQTT_SERVER
config["user"] = my_secrets.MQTT_USER
config["password"] = my_secrets.MQTT_PASSWORD
config["queue_len"] = 1  # Use event interface with default queue size

micropython.alloc_emergency_exception_buf(100)

RELAY_STATE_INVALID = 0
RELAY_STATE_THROUGH = 1
RELAY_STATE_CROSS = 2

RELAY_THRU = 1
RELAY_CROSS = 2

mqtt_desired = None  # The desired relay state
# mqtt_to_publish = None  # Queued to publish to MQTT

unit_number = 1  # Serial number for this relay


class Button:
    def __init__(self, relay):
        self._relay = relay

        # GPIO inputs for user control
        self._button1 = Pin(20, Pin.IN, Pin.PULL_UP)
        self._button2 = Pin(21, Pin.IN, Pin.PULL_UP)

        # Button IRQs will instigate pulses
        self._button1.irq(
            trigger=Pin.IRQ_FALLING, handler=lambda a: self.pushed_id(1)
        )
        self._button2.irq(
            trigger=Pin.IRQ_FALLING, handler=lambda a: self.pushed_id(2)
        )

    # IRQ handler for button push
    def pushed_id(self, id: int):
        """Respond to button push.

        :param id: id of the button
        :type id: int
        """
        global mqtt_desired

        mqtt_desired = None
        self._relay.set(RELAY_THRU if id == 1 else RELAY_CROSS)


class Oled:
    """Class to display text and graphics on an I2C OLED display.
    The graphics shown depict relay status.
    """

    FB_WIDTH = 128  # oled display width
    FB_HEIGHT = 64  # oled display height

    def __init__(self):
        # Set up OLED
        sda = Pin(4)
        scl = Pin(5)
        i2c = I2C(0, sda=sda, scl=scl, freq=400000)
        self._oled = SSD1306_I2C(Oled.FB_WIDTH, Oled.FB_HEIGHT, i2c)

        self._oled_backoff = 0

    # Here i will just write a really long comment line to see if the various formatters I have installed with bother themselves about dong anything to it. Hopefully they will turn it into something on several lines.

    _cross = bytearray(
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x006\x00\x00\x01\xf8\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00~\x00\x00\x01\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00~\x00\x00\x01\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00>\x00\x00"
        b"\x01\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00~\x00\x00\x01\xf8\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00~\x00\x00\x01\xf8\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00>\x00\x00\x01\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00~\x00\x00\x01\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00~\x00\x00\x01"
        b"\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\x00\x00\x01\xf8\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x7f\x00\x00\x07\xf8\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00?\xc0\x00\x07\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x1f\xe0\x00\x0f\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xe0"
        b"\x00?\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\xf8\x00?\x80\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xf8\x00\x7f\x80\x008\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x01\xfe\x00\xfe\x00\x00\xee\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\xfe\x03\xfe\x00\x01\x83\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x7f\x83\xf8\x00\x03\x01\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00?\x87\xf8\x00"
        b"\x02\x01\x86a\xc0\x1c\x01\xc0\x00\x00\x00\x00?\xef\xe0\x00\x06\x00\x07\xa7pw"
        b"\x87x\x00\x00\x00\x00\x0f\xff\xe0\x00\x06\x00\x06\x0c\x18@\x84\x08\x00\x00\x00"
        b"\x00\x07\xff\x80\x00\x06\x00\x06\x08\x08\xc0\xcc\x0c\x00\x00\x00\x00\x03\xff"
        b"\x80\x00\x04\x00\x06\x18\x0c\xc0\x0c\x00\x00\x00\x00\x00\x03\xfe\x00\x00\x06"
        b"\x00\x04\x18\x0cp\x07\x00\x00\x00\x00\x00\x01\xff\x00\x00\x06\x00\x06\x18\x0c"
        b"\x1f\x01\xf0\x00\x00\x00\x00\x07\xff\x00\x00\x02\x00\x06\x08\x0c\x01\x80\x18"
        b"\x00\x00\x00\x00\x07\xff\x80\x00\x02\x01\x86\x18\x08\x00\xc0\x0c\x00\x00\x00"
        b"\x00\x1f\xff\xe0\x00\x03\x01\x86\x08\x08\xc0\xcc\x0c\x00\x00\x00\x00\x1f\xdf"
        b"\xe0\x00\x01\x83\x04\x0c\x18@\x84\x08\x00\x00\x00\x00?\xc7\xf0\x00\x00\xee\x06"
        b"\x07\xf0\x7f\x87\xb8\x00\x00\x00\x00\x7f\x07\xf8\x00\x008\x06\x01@\x14\x01"
        b"\xe0\x00\x00\x00\x00\xff\x01\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x01\xfc\x01\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xfc"
        b"\x00\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\xf0\x00\x7f\x80"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xf0\x00\x1f\xc0\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x1f\xc0\x00\x1f\xe0\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00?\xc0\x00\x07\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x7f\x00\x00\x07\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\x00"
        b"\x00\x03\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00>\x00\x00\x01\xf0\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00~\x00\x00\x01\xf8\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00~\x00\x00\x01\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00~\x00\x00\x01\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00~\x00"
        b"\x00\x01\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00~\x00\x00\x01\xf8"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00~\x00\x00\x01\xf8\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00~\x00\x00\x01\xf8\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00*\x00\x00\x01\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00"
    )
    _fbcross = framebuf.FrameBuffer(
        _cross, FB_WIDTH, FB_HEIGHT, framebuf.MONO_HLSB
    )
    _thru = bytearray(
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x18\x00\x00\x00`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10"
        b"\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00`"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00`\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00P\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x18\x00\x00\x00`\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x10\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18"
        b"\x00\x00\x00`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00`"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00P\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00`\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x10\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x18\x00\x00\x00`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18"
        b"\x00\x00\x00`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00P"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00`\x00\x00\x0c"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00@\x07\xff\xcc\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x18\x00\x00\x00`\x02\xba\x8c\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x18\x00\x00\x00`\x000\x08\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00"
        b"\x00\x00P\x000\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00`\x000"
        b"\x0c\xe0f``\x00\x00\x00\x00\x10\x00\x00\x00@\x00 \r\xb8z``\x00\x00\x00\x00"
        b"\x18\x00\x00\x00`\x000\x0e\x08```\x00\x00\x00\x00\x18\x00\x00\x00`\x000"
        b"\x0c\x0c`@@\x00\x00\x00\x00\x14\x00\x00\x00P\x000\x08\x0c```\x00\x00\x00"
        b"\x00\x18\x00\x00\x00`\x00 \x0c\x0c@``\x00\x00\x00\x00\x10\x00\x00\x00@\x000"
        b"\x0c\x0c```\x00\x00\x00\x00\x18\x00\x00\x00`\x000\x0c\x0c`@@\x00\x00\x00"
        b"\x00\x18\x00\x00\x00`\x000\x08\x08```\x00\x00\x00\x00\x14\x00\x00\x00P\x00 "
        b"\x0c\x0c@``\x00\x00\x00\x00\x18\x00\x00\x00`\x000\x0c\x0c` \xe0\x00\x00\x00"
        b"\x00\x10\x00\x00\x00@\x000\x0c\x0c`?`\x00\x00\x00\x00\x18\x00\x00\x00`\x000"
        b"\x08\x0c`\x0c`\x00\x00\x00\x00\x18\x00\x00\x00`\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x14\x00\x00\x00P\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x18\x00\x00\x00`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00"
        b"\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00`\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00\xa0\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00`\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x18\x00\x00\x00P\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x10\x00\x00\x00`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18"
        b"\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00`"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00`\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00P\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x10\x00\x00\x00`\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x18\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18"
        b"\x00\x00\x00`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00`"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00@\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    )
    _fbthru = framebuf.FrameBuffer(
        _thru, FB_WIDTH, FB_HEIGHT, framebuf.MONO_HLSB
    )
    _invalid = bytearray(
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x01@\x00\x00"
        b"\x00)\x00\x00\x00\x00\x00\x07\xff\xf0\x00\x00\xbf\xfe\x00\x00\x0f\xff\xe0"
        b"\x00\x00\x00\x00\x7f\xff\xfc\x00\x07\xff\xff\xc0\x00\x7f\xff\xfc\x00\x00"
        b"\x00\x01\xff\xff\xff\x00\x1f\xff\xff\xf0\x03\xff\xff\xfe\x00\x00\x00\x07"
        b"\xff\xff\xff\x80\xff\xff\xff\xf8\x0f\xff\xff\xff\x80\x00\x00\x0f\xff\xff"
        b"\xff\xc0\xff\xff\xff\xfc\x1f\xff\xff\xff\xc0\x00\x00\x0f\xff\xff\xff\xe0"
        b"\xff\xff\xff\xfe\x0f\xff\xff\xff\xc0\x00\x00\x07\xff\xff\xff\xf0\xff\xff"
        b"\xff\xfe\x0f\xff\xff\xff\xe0\x00\x00\x07\xff\xff\xff\xf0\x7f\xff\xff\xff"
        b"\x07\xff\xff\xff\xf0\x00\x00\x03\xff\xd7\xff\xf8?\xfd\x7f\xff\x07\xff\xaf"
        b"\xff\xf0\x00\x00\x03\xfc\x00\x7f\xf8?\x80\x0f\xff\x83\xf8\x00\xff\xf0\x00"
        b"\x00\x01\xe0\x00?\xf8>\x00\x03\xff\x83\xc0\x00\x7f\xf8\x00\x00\x01\x80\x00?"
        b"\xf8\x10\x00\x03\xff\x81\x00\x00?\xf8\x00\x00\x00\x00\x00\x1f\xf8\x00\x00"
        b"\x03\xff\x80\x00\x00?\xf8\x00\x00\x00\x00\x00\x1f\xf8\x00\x00\x01\xff\x80"
        b"\x00\x00?\xf8\x00\x00\x00\x00\x00?\xf8\x00\x00\x03\xff\x80\x00\x00?\xf0\x00"
        b"\x00\x00\x00\x00\x1f\xf8\x00\x00\x03\xff\x80\x00\x00?\xf8\x00\x00\x00\x00"
        b"\x00?\xf8\x00\x00\x03\xff\x80\x00\x00\x7f\xf0\x00\x00\x00\x00\x00\x7f\xf8"
        b"\x00\x00\x07\xff\x00\x00\x00\x7f\xf0\x00\x00\x00\x00\x00\xff\xf0\x00\x00"
        b"\x0f\xff\x00\x00\x00\xff\xf0\x00\x00\x00\x00\x01\xff\xf0\x00\x00\x1f\xfe"
        b"\x00\x00\x01\xff\xe0\x00\x00\x00\x00\x03\xff\xe0\x00\x00?\xfe\x00\x00\x07"
        b"\xff\xc0\x00\x00\x00\x00\x07\xff\xc0\x00\x00\xff\xfc\x00\x00\x0f\xff\xc0"
        b"\x00\x00\x00\x00\x1f\xff\x80\x00\x01\xff\xf8\x00\x00\x1f\xff\x00\x00\x00"
        b"\x00\x00?\xff\x00\x00\x03\xff\xf0\x00\x00?\xfe\x00\x00\x00\x00\x00\x7f\xfe"
        b"\x00\x00\x07\xff\xc0\x00\x00\xff\xfc\x00\x00\x00\x00\x00\xff\xf8\x00\x00"
        b"\x0f\xff\x80\x00\x00\xff\xf8\x00\x00\x00\x00\x00\xff\xf0\x00\x00\x1f\xff"
        b"\x00\x00\x01\xff\xf0\x00\x00\x00\x00\x01\xff\xe0\x00\x00?\xfe\x00\x00\x03"
        b"\xff\xc0\x00\x00\x00\x00\x03\xff\xc0\x00\x00?\xfc\x00\x00\x03\xff\x80\x00"
        b"\x00\x00\x00\x03\xff\x80\x00\x00?\xf0\x00\x00\x07\xff\x00\x00\x00\x00\x00"
        b"\x03\xff\x00\x00\x00\x7f\xf0\x00\x00\x07\xfe\x00\x00\x00\x00\x00\x07\xfe"
        b"\x00\x00\x00\x7f\xe0\x00\x00\x07\xfe\x00\x00\x00\x00\x00\x03\xfe\x00\x00"
        b"\x00\x7f\xe0\x00\x00\x07\xfe\x00\x00\x00\x00\x00\x07\xfe\x00\x00\x00\x7f"
        b"\xe0\x00\x00\x07\xfc\x00\x00\x00\x00\x00\x03\xfe\x00\x00\x00\x7f\xe0\x00"
        b"\x00\x07\xfe\x00\x00\x00\x00\x00\x07\xfe\x00\x00\x00\x7f\xe0\x00\x00\x07"
        b"\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\x00\x00\x00\x06\x80"
        b"\x00\x00\x00\xa8\x00\x00\x00\x00\x00\x03\xfe\x00\x00\x00?\xc0\x00\x00\x03"
        b"\xfc\x00\x00\x00\x00\x00\x07\xff\x00\x00\x00\x7f\xf0\x00\x00\x07\xff\x00"
        b"\x00\x00\x00\x00\x07\xff\x00\x00\x00\x7f\xf0\x00\x00\x0f\xff\x00\x00\x00"
        b"\x00\x00\x0f\xff\x80\x00\x00\xff\xf8\x00\x00\x0f\xff\x00\x00\x00\x00\x00"
        b"\x0f\xff\x80\x00\x00\xff\xf8\x00\x00\x0f\xff\x80\x00\x00\x00\x00\x0f\xff"
        b"\x80\x00\x00\xff\xf8\x00\x00\x0f\xff\x00\x00\x00\x00\x00\x0f\xff\x80\x00"
        b"\x00\xff\xf8\x00\x00\x0f\xff\x80\x00\x00\x00\x00\x07\xff\x80\x00\x00\xff"
        b"\xf0\x00\x00\x0f\xff\x00\x00\x00\x00\x00\x07\xff\x00\x00\x00\x7f\xf0\x00"
        b"\x00\x0f\xff\x00\x00\x00\x00\x00\x07\xff\x00\x00\x00\x7f\xf0\x00\x00\x07"
        b"\xfe\x00\x00\x00\x00\x00\x03\xfe\x00\x00\x00?\xe0\x00\x00\x03\xfe\x00\x00"
        b"\x00\x00\x00\x00p\x00\x00\x00\x0f\x00\x00\x00\x00\xf0\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    )
    _fbinvalid = framebuf.FrameBuffer(
        _invalid, FB_WIDTH, FB_HEIGHT, framebuf.MONO_HLSB
    )

    def message(self, message: str):
        """Display a textual message on the OLED.

        Args:
            message (str): The string to display
        """
        self._oled.fill(0)
        lines = message.split("\n")
        for line_num, line in enumerate(lines):
            self._oled.text(line, 0, 8 * line_num)
        self._oled.show()

        self._oled_backoff = (
            20  # This will prevent the next 20 graphical updates
        )

    def update(self, relay_state: int):
        """Update the graphic on the OLED according to relay status.

        Args:
            relay_state (int): An integer describing the relay status
        """

        if self._oled_backoff <= 0:
            fb_values = [Oled._fbinvalid, Oled._fbthru, Oled._fbcross]
            self._oled.blit(fb_values[relay_state], 0, 0)
            self._oled.show()
        else:
            self._oled_backoff -= 1


oled = Oled()


class Relay:
    PULSE_TIME = const(50)
    DISARM_TIME = const(500)

    def __init__(self):
        # GPIO inputs to read relay state
        # print("Creating Relay object")
        self._relay_state_1 = Pin(10, Pin.IN, Pin.PULL_UP)
        self._relay_state_2 = Pin(11, Pin.IN, Pin.PULL_UP)

        # GPIO outputs for relay control pulses
        self._relay1 = Pin(14, Pin.OUT)
        self._relay2 = Pin(15, Pin.OUT)

        # Clear relay control outputs
        self._relay1.value(0)
        self._relay2.value(0)

        # Respond to button pushes when armed
        self._armed = True

        # Timer to produced defined pulse width
        self._pulse_timer = Timer()

        # Timer to re-enable relay pulses
        self._disarm_timer = Timer()

    def set(self, mode):
        """Set the relay to the chosen mode by sending a pulse.

        :param mode: The desired relay mode.
        :type mode: int
        """
        # global buttons_armed
        # , mqtt_to_publish

        if self._armed:
            if mode == RELAY_CROSS:
                self._relay1.value(0)
                self._relay2.value(1)
            else:
                self._relay1.value(1)
                self._relay2.value(0)
            self._pulse_timer.init(
                period=Relay.PULSE_TIME,
                mode=Timer.ONE_SHOT,
                callback=self.clear,
            )
            self._armed = False
            self._disarm_timer.init(
                period=Relay.DISARM_TIME,
                mode=Timer.ONE_SHOT,
                callback=self.re_arm,
            )

            # mqtt_to_publish = mode

    def clear(self, timr: Timer):
        """Clear the relay drive output pins.

        :param timr: The timer that triggered this call
        :type timr: Timer
        """

        self._relay1.value(0)
        self._relay2.value(0)

    def re_arm(self, timr: Timer):
        """Re-arm after timer time-out to allow for contact bounce.

        :param timr: The timer that triggered this call.
        :type timr: Timer
        """
        # global buttons_armed
        self._armed = True

    def read(self):
        """Read the state of the relay.

        Returns:
            int: The relays status: 0 (invalid), 1 (through) or 2 (cross)
        """

        if self._relay_state_1.value():
            if not self._relay_state_2.value():
                return RELAY_STATE_THROUGH
            else:
                return RELAY_STATE_INVALID
        else:
            if self._relay_state_2.value():
                return RELAY_STATE_CROSS
            else:
                return RELAY_STATE_INVALID


class MqttRelay:
    def __init__(self, config, relay, oled):
        self._relay = relay
        self._oled = oled
        self._client = MQTTClient(config)
        mqtt_task = asyncio.create_task(self.mqtt_main())

    async def mqtt_handler(self):
        """Respond to incoming messages

        Args:
            client (MQTTClient): MQTT client object
        """
        # global mqtt_desired

        async for topic, msg, retained in self._client.queue:
            print((topic, msg, retained))
            # message_oled(f'MQTT -> {msg}')
            desired = int(msg.decode())

            # print(f"{relay_state} {mqtt_desired}")

            if desired != self._relay.read():  # Trigger relay if necessary
                self._relay.set(desired)

    async def mqtt_up(self):
        """Respond to connectivity being (re)established

        Args:
            client (MQTTClient): MQTT client object
        """

        while True:
            await self._client.up.wait()  # Wait on an Event
            self._client.up.clear()

            await self._client.subscribe(
                f"radio_relay/{unit_number}/desired", 1
            )  # renew subscriptions

    async def mqtt_main(self):
        """Main update loop to monitor the MQTT broker.

        Args:
            client (MQTTClient): MQTT client object
        """
        # global mqtt_desired

        last_state = RELAY_STATE_INVALID
        try:
            await self._client.connect()
            print("Connected")
            oled.message("Relay controller\nMQTT Online")

            await asyncio.sleep(1)  # noqa: E722
            for coroutine in (self.mqtt_up, self.mqtt_handler):
                asyncio.create_task(coroutine())
            # n = 0
            while True:
                relay_state = self._relay.read()

                # print(f"{relay_state} {mqtt_desired}")

                # if self._mqtt_desired is not None:
                #     if (
                #         self._mqtt_desired != relay_state
                #     ):  # Trigger relay if necessary
                #         self._relay.set(self._mqtt_desired)
                #     else:  # Already in desired state
                #         self._mqtt_desired = (
                #             None  # Ignore desired state from now
                #         )

                # update_oled(relay_state)

                # Keep monitoring for relay state changes

                if last_state != relay_state:
                    await self._client.publish(
                        f"radio_relay/{unit_number}/state",
                        f"{relay_state}",
                        qos=1,
                    )
                last_state = relay_state
                await asyncio.sleep(0.1)
        except Exception as e:
            print("Exception")
            print(e)
            self._oled.message("Relay controller\nMQTT Error")


relay = Relay()
button = Button(relay)

mqtt_relay = MqttRelay(config, relay, oled)

# print('Starting')
# print(config)
# MQTTClient.DEBUG = True  # Optional: print diagnostic messages
oled.message("Relay controller\nMQTT Starting")


async def relay_update_loop():
    """Loop to monitor relay state and update the OLED accordingly"""
    while True:
        relay_state = relay.read()
        oled.update(relay_state)
        await asyncio.sleep_ms(100)


oled.message("Pico\nRelay controller")
time.sleep(2)

# mqtt_task = asyncio.create_task(mqtt_main(client, relay))

try:
    asyncio.run(relay_update_loop())
finally:
    asyncio.new_event_loop()
